version 1.0

workflow generate_HTAN_meta {
	input {
		###### count_matrix.csv generated by cumulus-cellranger ######
		String? cumulus_count_matrix

		###### count_matrix.csv provided by user (not running cumulus-cellranger) ######
		String? user_count_matrix

		###### whether the user runs cumulus-cellranger ######
		Boolean run_cumulus_cellranger

		###### sample_sheet specified ######
		File sample_sheet

		###### output folder of the HTAN meta files ######
		String output_dir

		###### job resource #####
		Int manifest_num_cpu
		String manifest_memory
		Int manifest_disk_space
		String sctk_docker = "campbio/sctk_qc:2.4.1"


		###### The HTAN level2 manifest file ######
		String cellranger_version
		String? genome_reference_name

		###### output folder of SCTK-QC pipeline ######
		String sctk_output_dir
		File tmp

	}

	call generate_level2_meta {
		input: 
			cumulus_count_matrix = cumulus_count_matrix,
			user_count_matrix = user_count_matrix,
			sample_sheet = sample_sheet,
			output_dir = output_dir,
			tmp = tmp,
			run_cumulus_cellranger = run_cumulus_cellranger,
			num_cpu = manifest_num_cpu,
			memory = manifest_memory,
			disk_space = manifest_disk_space,
			workflow_version = cellranger_version,
			workflow_link = "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger",
			genome_reference_name = genome_reference_name,
			sctk_docker = sctk_docker
	}

	call generate_level3level4_meta {
		input: 
			level2_meta = generate_level2_meta.level2_manifest,
			sample_sheet = sample_sheet,
			sctk_output_dir = sctk_output_dir,
			output_dir = output_dir,
			num_cpu = manifest_num_cpu,
			memory = manifest_memory,
			disk_space = manifest_disk_space,
			sctk_docker = sctk_docker,
			tmp = generate_level2_meta.l2_tmp
	}	

	output {
		File? level2_manifest = generate_level2_meta.level2_manifest
		File? level3_manifest = generate_level3level4_meta.level3_manifest
		File? level4_manifest = generate_level3level4_meta.level4_manifest
	}

}

task generate_level2_meta {
	input {
		String? cumulus_count_matrix
		String? user_count_matrix
		File sample_sheet
		String output_dir
		Boolean run_cumulus_cellranger
		Int num_cpu
		String memory
		Int disk_space
		String workflow_version
		String workflow_link = "https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger"
		String? genome_reference_name
		File tmp
		String sctk_docker = "campbio/sctk_qc:2.4.1"

	}

	command {
		echo $(date +%T)
		gsutil -q -m cp '~{sample_sheet}' .
		echo "Done copying the sample sheet"
		echo $(date +%T)

		echo "The output folder of HTAN level2 manifest file is:"
		echo ${output_dir}

		python3 <<CODE
		import pandas as pd
		import numpy as np
		import os
		import hashlib
		import re
		from datetime import datetime
		from subprocess import check_call, PIPE, run 

		def print_time():
			dateTimeObj = datetime.now()
			return dateTimeObj

		def file_check(command):
			result = run(command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
			return result.returncode

		print("Start generating level2 manifest file")

		### copy count_matrix.csv and sample_sheet
		if '~{run_cumulus_cellranger}' == 'true':
			count_matrix_path = "~{cumulus_count_matrix}"
		else:
			count_matrix_path = "~{user_count_matrix}"

		cp_code = "gsutil -q -m cp %s ." % (count_matrix_path)
		print(cp_code)
		os.system(cp_code)
		#cp_code = "gsutil -q -m cp %s ." % (sample_sheet)
		print("Done copying the count_matrix.csv file")
		print(print_time())


		### start processing level2 HTAN manifest files
		mat_file = os.path.basename(count_matrix_path)
		sample_sheet_file = os.path.basename("~{sample_sheet}")

		samplesheet = pd.read_csv(sample_sheet_file)
		count_csv = pd.read_csv(mat_file)

		samplesheet['HTAN_patient_ID'] = samplesheet['HTAN_Parent_Biospecimen_ID'].apply(lambda x: "_".join(x.split("_")[:2]))
		count_csv['FastqsFolder'] = samplesheet.loc[count_csv.index, 'Flowcell']

		count_csv['Genome_Annotation_link'] = samplesheet.loc[count_csv.index, 'Genome_Annotation']
		count_csv['Genome_Reference_link'] = samplesheet.loc[count_csv.index, 'Reference']

		count_csv['HTAN Patient ID'] = samplesheet.loc[count_csv.index, 'HTAN_patient_ID']
		count_csv['HTAN Biospecimen ID'] = samplesheet.loc[count_csv.index, 'HTAN_Parent_Biospecimen_ID'] 

		#### localize the bam and fastq files to compute checkSum
		print("Start collect checkSum for the bam and fastqs files")
		print(print_time())
		for i in (count_csv.index):
			bam = count_csv.loc[i, "Bam"]
			output_ID = count_csv.loc[i, "OutputID"]
			out_path = os.path.dirname(count_csv.loc[i, "Location"])
			patient_id = count_csv.loc[i, 'HTAN Patient ID']

			print(output_ID)
			l1_exist = file_check(['gsutil', '-q', 'ls', out_path + '/level1.md5'])
			l2_exist = file_check(['gsutil', '-q', 'ls', out_path + '/level2.md5'])
			assert l1_exist == 0, "MD5 sum for level1 data is not generated!"
			assert l2_exist == 0, "MD5 sum for level2 data is not generated!"
			
			check_call(['gsutil', '-q', 'cp', out_path + '/level1.md5', './'])
			l1_meta = pd.read_csv('./level1.md5', sep='\s+', header=None)	
					
			fastq_md5 = list(l1_meta[0].values)
			fastq_md5 = [str(int(x, base=16))[-10:] for x in fastq_md5]
			htan_parent_data_id = [patient_id + "_" + x for x in fastq_md5]
			count_csv.loc[i, "HTAN Parent Data File ID"] = ",".join(htan_parent_data_id)

			check_call(['gsutil', '-q', 'cp', out_path + '/level2.md5', './'])
			l2_meta = pd.read_csv('./level2.md5', sep='\s+', header=None)
			bam_md5 = list(l2_meta[0].values)[0]
			count_csv.loc[i, 'checkSum'] = bam_md5
			bam_md5_digit = str(int(bam_md5, base=16))[-10:] #[str(int(x, base=16))[-10:] for x in bam_md5]
			htan_data_id = patient_id + "_" + bam_md5_digit #[patient_id + "_" + x for x in bam_md5_digit]
			count_csv.loc[i, "HTAN Data File ID"] = htan_data_id #",".join(htan_data_id)

		### create place holder of level2 metadata
		x = np.array([[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]])
		c = ['Component',
			'Filename',
			'File Format',
			'HTAN Parent Data File ID',
			'HTAN Data File ID',
			'scRNAseq Workflow Type',
			'Workflow Version',
			'scRNAseq Workflow Parameters Description',
			'Workflow Link',
			'Genomic Reference',
			'Genomic Reference URL',
			'Genome Annotation URL',
			'Checksum',
			'Whitelist Cell Barcode File Link',
			'Cell Barcode Tag',
			'UMI Tag', 'Applied Hard Trimming', 'HTAN Biospecimen ID']

		l2_csv = pd.DataFrame(x, index = c)
		l2_csv = l2_csv.transpose()

		l2_csv['Filename'] = count_csv['Bam']
		l2_csv['Genome Annotation URL'] = count_csv['Genome_Annotation_link']
		l2_csv['Genomic Reference URL'] = count_csv['Genome_Reference_link']
		l2_csv['HTAN Data File ID'] = count_csv['HTAN Data File ID']
		l2_csv['HTAN Parent Data File ID'] = count_csv['HTAN Parent Data File ID']
		l2_csv['Checksum'] = count_csv['checkSum']
		l2_csv['Component'] = "ScRNA-seqLevel2"
		l2_csv['File Format'] = "bam"
		l2_csv['scRNAseq Workflow Type'] = "CellRanger"
		l2_csv['Whitelist Cell Barcode File Link'] = "https://github.com/10XGenomics/cellranger/raw/master/lib/python/cellranger/barcodes/3M-february-2018.txt.gz"
		l2_csv['Cell Barcode Tag'] = "CB"
		l2_csv['UMI Tag'] = "UB"
		l2_csv['Applied Hard Trimming'] = "No"
		l2_csv['Workflow Version'] = "~{workflow_version}"
		l2_csv['Workflow Link'] = "~{workflow_link}"
		l2_csv['Genomic Reference'] = "~{genome_reference_name}"
		l2_csv['HTAN Biospecimen ID'] = count_csv['HTAN Biospecimen ID']

		print("check the dim of l2_csv")
		print(l2_csv.shape)

		l2_csv.to_csv("HTAN_level2_manifest.csv",sep=",", index=False, header=True)
		os.system("gsutil -q -m cp HTAN_level2_manifest.csv ~{output_dir}")
		print("Output level2 manifest file done")

		CODE
		#gsutil -q -m cp HTAN_level2_manifest.csv '~{output_dir}' .
		#echo "Done copying the level2 manifest file outside python script"
		ls ./* >> level2_ls.txt
	}

	output {

		File? l2_tmp = "./level2_ls.txt"
		File? level2_manifest = "~{output_dir}/HTAN_level2_manifest.csv"
	}

	runtime {
		# Use this container, pull from DockerHub   
		docker: sctk_docker
		cpu: num_cpu
		memory: memory
		disks: "local-disk ~{disk_space} HDD"
		bootDiskSizeGb: 50
		preemptible: 2    
	} 
}

task generate_level3level4_meta {
	input {
		File? level2_meta
		File sample_sheet
		String sctk_output_dir
		String output_dir
		Int num_cpu
		String memory
		Int disk_space
		String sctk_docker = "campbio/sctk_qc:2.4.1"
		File? tmp
	}

	command {
		echo $(date +%T)
		gsutil -q -m cp '~{sample_sheet}' .
		echo "Done copying the sample sheet"
		echo $(date +%T) 
		gsutil -q -m cp '~{level2_meta}' .
		echo "Done copying the level2 manifest file"

		python3 <<CODE
		import pandas as pd
		import numpy as np
		import os
		import hashlib
		import re
		from datetime import datetime

		def print_time():
			dateTimeObj = datetime.now()
			return dateTimeObj

		print("Start generating level3 manifest file")
		print(print_time())

		sp = os.path.basename('~{sample_sheet}')
		lp = os.path.basename('~{level2_meta}')

		samplesheet = pd.read_csv(sp)
		l2_csv = pd.read_csv(lp)
		sctk_ver = '~{sctk_docker}'.split(':')[1]

		### read all level3 meta files generated by SCTK-QC
		print("Start loading all level3 and level4 meta data generated by SCTK-QC")
		print(print_time())
		m3_list = dict()
		m4_list = dict()

		for s in samplesheet["Output_ID"]:
			fp = '/'.join(["~{sctk_output_dir}", s, "sctkQC_v"+sctk_ver])
			print(fp)

			os.system("mkdir %s" % (s))
			l3_fn = fp + "/level3Meta.csv"
			l4_fn = fp + "/level4Meta.csv"
			os.system("gsutil -q -m cp %s ./%s" % (l3_fn, s))
			os.system("gsutil -q -m cp %s ./%s" % (l4_fn, s))

			l3_f = pd.read_csv("%s/level3Meta.csv" % (s), index_col = 0)
			m3_list[s] = l3_f
			l4_f = pd.read_csv("%s/level4Meta.csv" % (s), index_col = 0)
			m4_list[s] = l4_f

		l3_csv = pd.concat(m3_list)

		l3_csv['HTAN Parent Data File ID'] = l2_csv.reset_index().set_index('HTAN Biospecimen ID').loc[l3_csv['HTAN Biospecimen ID'], 'HTAN Data File ID'].values
		l3_csv['Filename'] = l3_csv['HTAN Biospecimen ID'] + '/' + l3_csv['Filename']
		biospec = l3_csv.pop('HTAN Biospecimen ID')
		l3_csv.insert(l3_csv.shape[1], biospec.name, biospec)

		l3_csv.to_csv("HTAN_level3_manifest.csv",sep=",", index=False, header=True)
		os.system("gsutil -q -m cp HTAN_level3_manifest.csv ~{output_dir}")
		print("Output level3 manifest file done")
		print(print_time())

		l4_csv = pd.concat(m4_list)
		l4_csv['Filename'] = l4_csv['HTAN Biospecimen ID'] + '/' + l4_csv['Filename']
		biospec = l4_csv.pop('HTAN Biospecimen ID')
		l4_csv.insert(l4_csv.shape[1], biospec.name, biospec)

		l4_csv.to_csv("HTAN_level4_manifest.csv",sep=",", index=False, header=True)
		os.system("gsutil -q -m cp HTAN_level4_manifest.csv ~{output_dir}")
		print("Output level4 manifest file done")	
		print(print_time())

		CODE
		#gsutil -q -m cp HTAN_level3_manifest.csv '~{output_dir}' .
		#echo "Done copying the level3 manifest file outside python script"
		ls ./* >> l3l4_ls.txt

	}

	output {
		File? l3l4_tmp = "./l3l4_ls.txt"
		File? level3_manifest = "~{output_dir}/HTAN_level3_manifest.csv"
		File? level4_manifest = "~{output_dir}/HTAN_level4_manifest.csv"
	}

	runtime {
		# Use this container, pull from DockerHub   
		docker: sctk_docker
		cpu: num_cpu
		memory: memory
		disks: "local-disk ~{disk_space} HDD"
		bootDiskSizeGb: 50
		preemptible: 2    
	} 	
}